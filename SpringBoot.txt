What is the difference between @autowired and constructor injection?
With setter injection, Spring allows us to specify optional dependencies by adding @Autowired(required = false) to a setter method.
This is not possible with constructor injection since the required=false would be applied to all constructor arguments.

Is Autowired needed for constructor injection?
As of Spring Framework 4.3, an @Autowired annotation on such a constructor is no longer necessary 
if the target bean defines only one constructor to begin with.

getForObject() vs getForEntity()
The getForObject() and getForEntity() methods are used to make GET requests. 
The main difference between the two is that getForObject() returns the response body as an object, 
while getForEntity() returns a ResponseEntity object. 
This ResponseEntity object contains the response body, as well as information about the status code and headers
--
The RestTemplate getForObject() method does not support setting headers. The solution is to use the exchange() method.
So instead of restTemplate.getForObject(url, String.class, param) (which has no headers), use
HttpHeaders headers = new HttpHeaders();
headers.set("Header", "value");
headers.set("Other-Header", "othervalue");
HttpEntity<Void> requestEntity = new HttpEntity<>(headers);
ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.GET, requestEntity, String.class, param);
Finally, use response.getBody() to get your result.

What is the use of exchange method in RestTemplate?
Using exchange() for POST
RestTemplate class has similar methods for other HTTP verbs like PUT, DELETE, and PATCH. 
Here we are making the POST request by sending HttpMethod. POST as a parameter in addition to the request body and the response type POJO
restTemplate.exchange(url endpoint, HttpMethod.GET,entity, params)
 HttpHeaders headers = new HttpHeaders();
 headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));
 HttpEntity<String> entity = new HttpEntity<String>(headers);
 ResponseEntity<List<Employee>> response = restTemplate.exchange("http://hello-server/rest/employees",
 HttpMethod.GET,entity, new ParameterizedTypeReference<List<Employee>>() {});
 return response.getBody(); //this returns List of Employee 
---


features of Spring Boot.
Starter Dependency – With the help of this feature, Spring Boot aggregates common dependencies together and eventually improves productivity.
Auto-Configuration – The auto-configuration feature of Spring Boot helps in loading the default configurations according to the project you are working on. In this way, you can avoid any unnecessary WAR files.
Spring Initializer – This is basically a web application, which can create an internal project structure for you. So, you do not have to manually set up the structure of the project, instead, you can use this feature.
Spring Actuator –  This feature provides help while running Spring Boot applications.

What do you understand by auto-configuration in Spring Boot and how to disable the auto-configuration?
Auto-configuration is used to automatically configure the required configuration for the application. For example, if you have a data source bean present in the classpath of the application, then it automatically configures the JDBC template. With the help of auto-configuration
disable the auto-configuration property, you have to exclude attribute of @EnableAutoConfiguration, in the scenario where you do not want it to be applied.
@EnableAutoConfiguration(exclude={DataSourceAutoConfiguration.class})
If the class is not on the classpath, then to exclude the auto-configuration, you have to mention the following code:
@EnableAutoConfiguration(excludeName={Sample.class})
Apart from this, Spring Boot also provides the facility to exclude list of auto-configuration classes by using the spring.autoconfigure.exclude property.

What does the @SpringBootApplication annotation do internally?
@Configuration: 
@EnableAutoConfiguration: Enables Spring Boot’s auto-configuration feature, which attempts to automatically configure your application based on the dependencies in its classpath. For example, if Spring MVC is on the classpath, this annotation flags the application to be web-applicable and activates key behaviors like setting up a DispatcherServlet.
@ComponentScan: Enables component scanning. This allows Spring to automatically discover other components, configurations and services in the same package as the one where the @SpringBootApplication is placed, allowing it to automatically manage them (i.e., create bean instances for your classes at application startup).

What do you think is the need for Profiles?
Profiles are used to provide a way to segregate the different parts of the application configuration and make it available for various environments.
So, basically, any @Component or a @Configuration can be marked with a @Profile to limit as it is loaded. Consider you have multiple environments,
Dev
QA
Stage
Production
Now, let’s say, you want to have different application configuration in each of the environments, you can use profiles to have different application configurations for different environments. So, basically, Spring and Spring Boot provide features through which you can specify:
The active profile for a specific environment
The configuration of various environments for various profiles.

What is the way to use profiles to configure the environment-specific configuration with Spring Boot?
application.properties
application-dev.properties
application-prod.properties

Once you are done with the profile-specific configuration, you have to set the active profile in an environment. To do that, either you can
Use -Dspring.profiles.active=prod in  arguments
Use spring.profiles.active=prod in application.properties file

How does Spring Boot works?
Spring Boot automatically configures your application based on the dependencies you have added to the project by using annotation. 
The entry point of the spring boot application is the class that contains @SpringBootApplication annotation and the main method.
Spring Boot automatically scans all the components included in the project by using @ComponentScan annotation.

Can we disable the default web server in the Spring boot application?
Yes, we can use application.properties to configure the web application type i.e spring.main.web-application-type=none.

* filter vs intercaepter
Filters intercept requests before they reach the DispatcherServlet, making them ideal for coarse-grained tasks such as:
Authentication
Logging and auditing
Image and data compression
Any functionality we want to be decoupled from Spring MVC

HandlerIntercepors, on the other hand, intercepts requests between the DispatcherServlet and our Controllers. This is done within the Spring MVC framework, providing access to the Handler and ModelAndView objects. This reduces duplication and allows for more fine-grained functionality such as:
Handling cross-cutting concerns such as application logging
Detailed authorization checks
Manipulating the Spring context or model

* RestTemplate is a utility class in Spring Framework that makes it simple to send HTTP messages and process the response.

*  resttemplate vs webclient  (Blocking vs Non-Blocking Client)
-RestTemplate Blocking Client - RestTemplate uses the Java Servlet API, which is based on the thread-per-request model.
This means that the thread will block until the web client receives the response. The problem with the blocking code is due to each thread consuming some amount of memory and CPU cycles.
-WebClient Non-Blocking Client
On the other side, WebClient uses an asynchronous, non-blocking solution provided by the Spring Reactive framework.
